name: Spring Boot CI Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # SonarCloud 분석을 위해 전체 히스토리 가져오기

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean Gradle Build Cache
        run: ./gradlew --build-cache clean

      - name: Clean build directory
        run: ./gradlew clean

      - name: Run Tests
        run: ./gradlew test --continue
        env:
          SPRING_PROFILES_ACTIVE: test
          APP_VERIFICATION_URL: ${{ secrets.APP_VERIFICATION_URL }}
          JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}

      - name: Generate Test Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Build Project (without tests)
        run: ./gradlew build -x test
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          APP_VERIFICATION_URL: ${{ secrets.APP_VERIFICATION_URL }}

      # - name: Upload Test Results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-results
      #     path: build/test-results/test/*.xml

      # - name: Upload Test Coverage
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-coverage
      #     path: build/reports/jacoco/test/jacocoTestReport.xml

      # SONAR_TOKEN 디버그 스텝은 꼭 필요한 경우에만 사용
      # - name: Debug SONAR_TOKEN
      #   run: |
      #     if [ -z "$SONAR_TOKEN" ]; then
      #       echo "SONAR_TOKEN is not set"
      #     else
      #       echo "SONAR_TOKEN is set (length: ${#SONAR_TOKEN})"
      #     fi
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Analyze with SonarCloud
        run: |
          ./gradlew sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.scm.provider=git \ # Git SCM 사용 명시
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.junit.reportPaths=build/test-results/test
          
          # 브랜치 유형에 따라 적절한 파라미터 전달
          # PR 이벤트인 경우
          ${{ github.event_name == 'pull_request' && format(' -Dsonar.pullrequest.key={0} -Dsonar.pullrequest.branch={1} -Dsonar.pullrequest.base={2}', github.event.pull_request.number, github.head_ref, github.base_ref) || '' }} \
          # Push 이벤트인 경우 (브랜치 이름 전달)
          ${{ github.event_name == 'push' && format(' -Dsonar.branch.name={0}', github.ref_name) || '' }}

        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
